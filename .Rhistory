class(pred$svm_pred)
View(svm_pred)
View(pred)
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = data.frame("Pred" = predict(svm_classifier, trial[-19]))
svm_pred
str(pred)
class(svm_pred$Pred)
library(ROSE)
library(e1071)
library(dplyr)
library(caret)
#Load data
dt = read.csv("Shiny Readmission.csv")
dt[1] = NULL
# Convert to Factor
dt$age = as.factor(dt$age)
dt$admission_type_id = as.factor(dt$admission_type_id)
dt$discharge_disposition_id = as.factor(dt$discharge_disposition_id)
dt$admission_source_id = as.factor(dt$admission_source_id)
dt$medical_specialty = as.factor(dt$medical_specialty)
dt$max_glu_serum = as.factor(dt$max_glu_serum)
dt$A1Cresult = as.factor(dt$A1Cresult)
df = read.csv("Filtered Diabetic Readmission.csv")
df[1] = NULL
#Encoding the categorical target variables as factors
df$readmitted = as.factor(df$readmitted)
#Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(df$readmitted, SplitRatio = 0.80)
df_train = subset(df, split == TRUE)
df_test = subset(df, split == FALSE)
#Feature Scaling
df_train[-19] = scale(df_train[-19])
df_test[-19] = scale(df_test[-19])
# balanced data set with under sampling
df_train <- ovun.sample(readmitted~., data=df,
method="under",
p = 0.5,
seed=1)$data
table(df_train$readmitted)
# Building SVM classifier
svm_classifier = svm(formula = readmitted ~ .,
data = df_train,
type = 'C-classification',
kernel = 'linear')
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = data.frame("Pred" = predict(svm_classifier, trial[-19]))
svm_pred
str(svm_pred)
class(svm_pred$Pred)
svm_pred[1,]
runApp()
library(reshape2)
melt(svm_pred)
View(svm_pred)
class(svm_pred$Pred)
svm_pred[1,]
runApp()
runApp()
runApp()
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
melt(svm_pred)
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
d = melt(svm_pred)
View(d)
str(d)
class(d$value)
d[1,]
runApp()
d$value = as.character(d$value)
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
d = as.character(melt(svm_pred))
d = melt(svm_pred)
d = as.character(melt(svm_pred))
d
d = melt(svm_pred)
d$value = as.charecter(d$value)
d$value = as.character(d$value)
d
d$value
svm_pred = as.character(predict(svm_classifier, trial[-19]))
svm_pred
svm_pred = data.frame("Pred" = as.character(predict(svm_classifier, trial[-19])))
View(svm_pred)
library(ROSE)
library(e1071)
library(dplyr)
library(caret)
library(reshape2)
#Load data
dt = read.csv("Shiny Readmission.csv")
dt[1] = NULL
# Convert to Factor
dt$age = as.factor(dt$age)
dt$admission_type_id = as.factor(dt$admission_type_id)
dt$discharge_disposition_id = as.factor(dt$discharge_disposition_id)
dt$admission_source_id = as.factor(dt$admission_source_id)
dt$medical_specialty = as.factor(dt$medical_specialty)
dt$max_glu_serum = as.factor(dt$max_glu_serum)
dt$A1Cresult = as.factor(dt$A1Cresult)
df = read.csv("Filtered Diabetic Readmission.csv")
df[1] = NULL
#Encoding the categorical target variables as factors
df$readmitted = as.factor(df$readmitted)
#Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(df$readmitted, SplitRatio = 0.80)
df_train = subset(df, split == TRUE)
df_test = subset(df, split == FALSE)
#Feature Scaling
df_train[-19] = scale(df_train[-19])
df_test[-19] = scale(df_test[-19])
# balanced data set with under sampling
df_train <- ovun.sample(readmitted~., data=df,
method="under",
p = 0.5,
seed=1)$data
# Building SVM classifier
svm_classifier = svm(formula = readmitted ~ .,
data = df_train,
type = 'C-classification',
kernel = 'linear')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = data.frame("Pred" = as.character(predict(svm_classifier, trial[-19])))
svm_pred
trial = data.frame("gender" = c(2,1),"age" = c(2,5), "admission_type_id" = c(2,2),
"discharge_disposition_id" = c(1,2),
"admission_source_id" = c(5,5), "time_in_hospital" = c(3,8), "medical_specialty" = c(9,1),
"num_lab_procedures" = c(2,4), "num_procedures" = c(2,2), "num_medications" = c(2,4),
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = c(1,2), "max_glu_serum" = c(0,1), "A1Cresult" = c(0,1), "change" = c(0,0),
"diabetesMed" = c(0,0),
"readmitted" = c(1,1))
trial$readmitted = as.factor(trial$readmitted)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
plot(model,trial)
plot(svm_classifier,trial)
plot.svm(svm_classifier,trial)
library(e1071)
plot.svm(svm_classifier,trial)
plot(svm_classifier,trial)
library(MASS)
plot(svm_classifier,trial)
plot(svm_classifier,trial, admission_source_id ~ medical_specialty)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
as.character(svm_pred)
runApp()
knitr::opts_chunk$set(echo = TRUE)
n1 = list(1, 2, 3)
c1 = list(4, 5, 6)
#Original list
print(n1)
print(c1)
#Convert the lists to vectors:
v1 = unlist(n1)
v2 = unlist(c1)
#Add two vectors:
v = v1 + v2
#New Vector:
print(v)
svm_pred = list(predict(svm_classifier, trial[-19]))
View(c1)
svm_pred
svm_pred = unlist(svm_pred)
svm_pred
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = c(0,0),
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
svm_pred = list(predict(svm_classifier, trial[-19]))
svm_pred = unlist(svm_pred)
svm_pred
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
svm_pred = list(predict(svm_classifier, trial[-19]))
svm_pred = unlist(svm_pred)
svm_pred
svm_pred = as.character(predict(svm_classifier, trial[-19]))
svm_pred
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
confusionMatrix(svm_pred, trial)
confusionMatrix(svm_classifier, trial)
confusionMatrix(svm_pred, trial[, 19])
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
svm_pred = as.character(predict(svm_classifier, trial[-19]))
confusionMatrix(svm_pred, trial[, 19])
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
svm_pred = predict(svm_classifier, trial[-19])
confusionMatrix(svm_pred, trial[, 19])
confusionMatrix(svm_pred, trial$readmitted)
table(svm_pred, trial$readmitted)
knitr::opts_chunk$set(echo = TRUE)
k = factor(c("Male"))
levels(k) = c("Male", "Female")
k
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
levels(trial$readmitted) = c("0", "1")
svm_pred = predict(svm_classifier, trial[-19])
svm_pred
table(svm_pred, trial$readmitted)
confusionMatrix(svm_pred, trial$readmitted)
table(svm_pred, trial$readmitted)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
levels(trial$readmitted) = c("0", "1")
svm_pred = predict(svm_classifier, trial[-19])
names(svm_pred) = NULL
svm_pred
runApp()
cat(svm_pred)
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
levels(trial$readmitted) = c("0", "1")
svm_pred = predict(svm_classifier, trial[-19])
names(svm_pred) = NULL
cat(svm_pred)
runApp()
svm_pred = predict(svm_classifier, trial[-19], probability = TRUE)
# Building SVM classifier
svm_classifier = svm(formula = readmitted ~ .,
data = df_train,
type = 'C-classification',
kernel = 'linear',
probability = TRUE)
svm_pred = predict(svm_classifier, trial[-19], probability = TRUE)
svm_pred
library(ROSE)
library(e1071)
library(dplyr)
library(caret)
library(reshape2)
library(MASS)
#Load data
dt = read.csv("Shiny Readmission.csv")
dt[1] = NULL
# Convert to Factor
dt$age = as.factor(dt$age)
dt$admission_type_id = as.factor(dt$admission_type_id)
dt$discharge_disposition_id = as.factor(dt$discharge_disposition_id)
dt$admission_source_id = as.factor(dt$admission_source_id)
dt$medical_specialty = as.factor(dt$medical_specialty)
dt$max_glu_serum = as.factor(dt$max_glu_serum)
dt$A1Cresult = as.factor(dt$A1Cresult)
df = read.csv("Filtered Diabetic Readmission.csv")
df[1] = NULL
#Encoding the categorical target variables as factors
df$readmitted = as.factor(df$readmitted)
#Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(df$readmitted, SplitRatio = 0.80)
df_train = subset(df, split == TRUE)
df_test = subset(df, split == FALSE)
#Feature Scaling
df_train[-19] = scale(df_train[-19])
df_test[-19] = scale(df_test[-19])
# balanced data set with under sampling
df_train <- ovun.sample(readmitted~., data=df,
method="under",
p = 0.5,
seed=1)$data
# Building SVM classifier
svm_classifier = svm(formula = readmitted ~ .,
data = df_train,
type = 'C-classification',
kernel = 'linear')
runApp()
runApp()
runApp()
runApp()
runApp()
trial = data.frame("gender" = 2,"age" = 2, "admission_type_id" = 2,
"discharge_disposition_id" = 1,
"admission_source_id" = 5, "time_in_hospital" = 3, "medical_specialty" = 9,
"num_lab_procedures" = 2, "num_procedures" = 2, "num_medications" = 2,
"number_outpatient" = 0, "number_emergency" = 0, "number_inpatient" =1,
"number_diagnoses" = 1, "max_glu_serum" = 0, "A1Cresult" = 0, "change" = 0,
"diabetesMed" = 0,
"readmitted" = 1)
trial$readmitted = as.factor(trial$readmitted)
levels(trial$readmitted) = c("0", "1")
svm_pred = predict(svm_classifier, trial[-19])
as.integer(svm_pred)
as.character(svm_pred)
runApp()
runApp()
runApp()
runApp()
list(svmp_pred)
list(svm_pred)
svm_pred = predict(svm_classifier, trial[-19])
svm_pred = names(svm_pred)
list(svm_pred)
runApp()
runApp()
runApp()
setwd("C:/Users/user/Downloads/MDS Final Project Report - Mazlini Halini/SVM")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ROSE)
library(e1071)
library(dplyr)
library(caret)
library(reshape2)
library(MASS)
#Load data
dt = read.csv("Shiny Readmission.csv")
dt[1] = NULL
# Convert to Factor
dt$age = as.factor(dt$age)
dt$admission_type_id = as.factor(dt$admission_type_id)
dt$discharge_disposition_id = as.factor(dt$discharge_disposition_id)
dt$admission_source_id = as.factor(dt$admission_source_id)
dt$medical_specialty = as.factor(dt$medical_specialty)
dt$max_glu_serum = as.factor(dt$max_glu_serum)
dt$A1Cresult = as.factor(dt$A1Cresult)
df = read.csv("Filtered Diabetic Readmission.csv")
df[1] = NULL
#Encoding the categorical target variables as factors
df$readmitted = as.factor(df$readmitted)
#Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(df$readmitted, SplitRatio = 0.80)
df_train = subset(df, split == TRUE)
df_test = subset(df, split == FALSE)
#Feature Scaling
df_train[-19] = scale(df_train[-19])
df_test[-19] = scale(df_test[-19])
# balanced data set with under sampling
df_train <- ovun.sample(readmitted~., data=df,
method="under",
p = 0.5,
seed=1)$data
# Building SVM classifier
svm_classifier = svm(formula = readmitted ~ .,
data = df_train,
type = 'C-classification',
kernel = 'linear')
runApp()
setwd("C:/Users/user/Downloads/MDS Final Project Report - Mazlini Halini/SVM")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/user/Downloads/MDS Final Project Report - Mazlini Halini/SVM")
shiny::runApp()
setwd("C:/Users/user/Downloads/MDS Final Project Report - Mazlini Halini/SVM")
install.packages("shinythemes")
setwd("C:/Users/user/Downloads/MDS Final Project Report - Mazlini Halini/SVM")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
